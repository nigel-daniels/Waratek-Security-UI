/**
 * Copyright 2014 Waratek Ltd.
 */
package com.waratek.rules.provider;

import com.waratek.rules.util.RulesAdapterFactory;

import java.util.ArrayList;
import java.util.Collection;

import org.eclipse.emf.common.notify.Adapter;
import org.eclipse.emf.common.notify.Notification;
import org.eclipse.emf.common.notify.Notifier;

import org.eclipse.emf.edit.provider.ChangeNotifier;
import org.eclipse.emf.edit.provider.ComposeableAdapterFactory;
import org.eclipse.emf.edit.provider.ComposedAdapterFactory;
import org.eclipse.emf.edit.provider.IChangeNotifier;
import org.eclipse.emf.edit.provider.IDisposable;
import org.eclipse.emf.edit.provider.IEditingDomainItemProvider;
import org.eclipse.emf.edit.provider.IItemLabelProvider;
import org.eclipse.emf.edit.provider.IItemPropertySource;
import org.eclipse.emf.edit.provider.INotifyChangedListener;
import org.eclipse.emf.edit.provider.IStructuredItemContentProvider;
import org.eclipse.emf.edit.provider.ITreeItemContentProvider;

/**
 * This is the factory that is used to provide the interfaces needed to support Viewers.
 * The adapters generated by this factory convert EMF adapter notifications into calls to {@link #fireNotifyChanged fireNotifyChanged}.
 * The adapters also support Eclipse property sheets.
 * Note that most of the adapters are shared among multiple instances.
 * <!-- begin-user-doc -->
 * <!-- end-user-doc -->
 * @generated
 */
public class RulesItemProviderAdapterFactory extends RulesAdapterFactory implements ComposeableAdapterFactory, IChangeNotifier, IDisposable {
	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public static final String copyright = "Copyright 2015 Waratek Ltd.";

	/**
	 * This keeps track of the root adapter factory that delegates to this adapter factory.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected ComposedAdapterFactory parentAdapterFactory;

	/**
	 * This is used to implement {@link org.eclipse.emf.edit.provider.IChangeNotifier}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected IChangeNotifier changeNotifier = new ChangeNotifier();

	/**
	 * This keeps track of all the supported types checked by {@link #isFactoryForType isFactoryForType}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected Collection<Object> supportedTypes = new ArrayList<Object>();

	/**
	 * This constructs an instance.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public RulesItemProviderAdapterFactory() {
		supportedTypes.add(IEditingDomainItemProvider.class);
		supportedTypes.add(IStructuredItemContentProvider.class);
		supportedTypes.add(ITreeItemContentProvider.class);
		supportedTypes.add(IItemLabelProvider.class);
		supportedTypes.add(IItemPropertySource.class);
	}

	/**
	 * This keeps track of the one adapter used for all {@link com.waratek.rules.RuleDocument} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected RuleDocumentItemProvider ruleDocumentItemProvider;

	/**
	 * This creates an adapter for a {@link com.waratek.rules.RuleDocument}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createRuleDocumentAdapter() {
		if (ruleDocumentItemProvider == null)
		{
			ruleDocumentItemProvider = new RuleDocumentItemProvider(this);
		}

		return ruleDocumentItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link com.waratek.rules.File} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected FileItemProvider fileItemProvider;

	/**
	 * This creates an adapter for a {@link com.waratek.rules.File}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createFileAdapter() {
		if (fileItemProvider == null)
		{
			fileItemProvider = new FileItemProvider(this);
		}

		return fileItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link com.waratek.rules.Network} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected NetworkItemProvider networkItemProvider;

	/**
	 * This creates an adapter for a {@link com.waratek.rules.Network}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createNetworkAdapter() {
		if (networkItemProvider == null)
		{
			networkItemProvider = new NetworkItemProvider(this);
		}

		return networkItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link com.waratek.rules.ReflectPackage} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected ReflectPackageItemProvider reflectPackageItemProvider;

	/**
	 * This creates an adapter for a {@link com.waratek.rules.ReflectPackage}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createReflectPackageAdapter() {
		if (reflectPackageItemProvider == null)
		{
			reflectPackageItemProvider = new ReflectPackageItemProvider(this);
		}

		return reflectPackageItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link com.waratek.rules.ReflectClass} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected ReflectClassItemProvider reflectClassItemProvider;

	/**
	 * This creates an adapter for a {@link com.waratek.rules.ReflectClass}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createReflectClassAdapter() {
		if (reflectClassItemProvider == null)
		{
			reflectClassItemProvider = new ReflectClassItemProvider(this);
		}

		return reflectClassItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link com.waratek.rules.ReflectConstructor} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected ReflectConstructorItemProvider reflectConstructorItemProvider;

	/**
	 * This creates an adapter for a {@link com.waratek.rules.ReflectConstructor}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createReflectConstructorAdapter() {
		if (reflectConstructorItemProvider == null)
		{
			reflectConstructorItemProvider = new ReflectConstructorItemProvider(this);
		}

		return reflectConstructorItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link com.waratek.rules.ReflectMethod} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected ReflectMethodItemProvider reflectMethodItemProvider;

	/**
	 * This creates an adapter for a {@link com.waratek.rules.ReflectMethod}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createReflectMethodAdapter() {
		if (reflectMethodItemProvider == null)
		{
			reflectMethodItemProvider = new ReflectMethodItemProvider(this);
		}

		return reflectMethodItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link com.waratek.rules.ReflectField} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected ReflectFieldItemProvider reflectFieldItemProvider;

	/**
	 * This creates an adapter for a {@link com.waratek.rules.ReflectField}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createReflectFieldAdapter() {
		if (reflectFieldItemProvider == null)
		{
			reflectFieldItemProvider = new ReflectFieldItemProvider(this);
		}

		return reflectFieldItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link com.waratek.rules.ThrowableClass} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected ThrowableClassItemProvider throwableClassItemProvider;

	/**
	 * This creates an adapter for a {@link com.waratek.rules.ThrowableClass}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createThrowableClassAdapter() {
		if (throwableClassItemProvider == null)
		{
			throwableClassItemProvider = new ThrowableClassItemProvider(this);
		}

		return throwableClassItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link com.waratek.rules.ClassLink} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected ClassLinkItemProvider classLinkItemProvider;

	/**
	 * This creates an adapter for a {@link com.waratek.rules.ClassLink}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createClassLinkAdapter() {
		if (classLinkItemProvider == null)
		{
			classLinkItemProvider = new ClassLinkItemProvider(this);
		}

		return classLinkItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link com.waratek.rules.Native} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected NativeItemProvider nativeItemProvider;

	/**
	 * This creates an adapter for a {@link com.waratek.rules.Native}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createNativeAdapter() {
		if (nativeItemProvider == null)
		{
			nativeItemProvider = new NativeItemProvider(this);
		}

		return nativeItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link com.waratek.rules.SQLInjection} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected SQLInjectionItemProvider sqlInjectionItemProvider;

	/**
	 * This creates an adapter for a {@link com.waratek.rules.SQLInjection}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createSQLInjectionAdapter() {
		if (sqlInjectionItemProvider == null)
		{
			sqlInjectionItemProvider = new SQLInjectionItemProvider(this);
		}

		return sqlInjectionItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link com.waratek.rules.Comment} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected CommentItemProvider commentItemProvider;

	/**
	 * This creates an adapter for a {@link com.waratek.rules.Comment}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createCommentAdapter() {
		if (commentItemProvider == null)
		{
			commentItemProvider = new CommentItemProvider(this);
		}

		return commentItemProvider;
	}

	/**
	 * This returns the root adapter factory that contains this factory.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public ComposeableAdapterFactory getRootAdapterFactory() {
		return parentAdapterFactory == null ? this : parentAdapterFactory.getRootAdapterFactory();
	}

	/**
	 * This sets the composed adapter factory that contains this factory.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public void setParentAdapterFactory(ComposedAdapterFactory parentAdapterFactory) {
		this.parentAdapterFactory = parentAdapterFactory;
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public boolean isFactoryForType(Object type) {
		return supportedTypes.contains(type) || super.isFactoryForType(type);
	}

	/**
	 * This implementation substitutes the factory itself as the key for the adapter.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter adapt(Notifier notifier, Object type) {
		return super.adapt(notifier, this);
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Object adapt(Object object, Object type) {
		if (isFactoryForType(type))
		{
			Object adapter = super.adapt(object, type);
			if (!(type instanceof Class<?>) || (((Class<?>)type).isInstance(adapter)))
			{
				return adapter;
			}
		}

		return null;
	}

	/**
	 * This adds a listener.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public void addListener(INotifyChangedListener notifyChangedListener) {
		changeNotifier.addListener(notifyChangedListener);
	}

	/**
	 * This removes a listener.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public void removeListener(INotifyChangedListener notifyChangedListener) {
		changeNotifier.removeListener(notifyChangedListener);
	}

	/**
	 * This delegates to {@link #changeNotifier} and to {@link #parentAdapterFactory}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public void fireNotifyChanged(Notification notification) {
		changeNotifier.fireNotifyChanged(notification);

		if (parentAdapterFactory != null)
		{
			parentAdapterFactory.fireNotifyChanged(notification);
		}
	}

	/**
	 * This disposes all of the item providers created by this factory. 
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public void dispose() {
		if (ruleDocumentItemProvider != null) ruleDocumentItemProvider.dispose();
		if (fileItemProvider != null) fileItemProvider.dispose();
		if (networkItemProvider != null) networkItemProvider.dispose();
		if (reflectPackageItemProvider != null) reflectPackageItemProvider.dispose();
		if (reflectClassItemProvider != null) reflectClassItemProvider.dispose();
		if (reflectConstructorItemProvider != null) reflectConstructorItemProvider.dispose();
		if (reflectMethodItemProvider != null) reflectMethodItemProvider.dispose();
		if (reflectFieldItemProvider != null) reflectFieldItemProvider.dispose();
		if (throwableClassItemProvider != null) throwableClassItemProvider.dispose();
		if (classLinkItemProvider != null) classLinkItemProvider.dispose();
		if (nativeItemProvider != null) nativeItemProvider.dispose();
		if (sqlInjectionItemProvider != null) sqlInjectionItemProvider.dispose();
		if (commentItemProvider != null) commentItemProvider.dispose();
	}

}
